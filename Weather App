import tkinter as tk
from tkinter import ttk, messagebox
import requests
from PIL import Image, ImageTk
import io

class WeatherApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Weather App")
        self.api_key = "20195c5f248a4b339582ec7199c6ee4f"  
        self.location_label = ttk.Label(root, text="Enter City or ZIP code:")
        self.location_label.grid(row=0, column=0, padx=10, pady=10)
        self.location_entry = ttk.Entry(root, width=20)
        self.location_entry.grid(row=0, column=1, padx=10, pady=10)
        self.unit_var = tk.StringVar(value="metric")
        self.unit_celsius = ttk.Radiobutton(root, text="Celsius", variable=self.unit_var, value="metric")
        self.unit_fahrenheit = ttk.Radiobutton(root, text="Fahrenheit", variable=self.unit_var, value="imperial")
        self.unit_celsius.grid(row=0, column=2, padx=10, pady=10)
        self.unit_fahrenheit.grid(row=0, column=3, padx=10, pady=10)
        self.get_weather_button = ttk.Button(root, text="Get Weather", command=self.get_weather)
        self.get_weather_button.grid(row=0, column=4, padx=10, pady=10)
        self.weather_frame = ttk.LabelFrame(root, text="Weather Information")
        self.weather_frame.grid(row=1, column=0, columnspan=5, padx=10, pady=10, sticky="ew")
        self.weather_info = tk.Label(self.weather_frame, text="", font=("Helvetica", 10))
        self.weather_info.grid(row=0, column=0, padx=10, pady=10)
        self.weather_icon_label = tk.Label(self.weather_frame)
        self.weather_icon_label.grid(row=0, column=1, padx=10, pady=10)
    def get_weather(self):
        location = self.location_entry.get()
        unit = self.unit_var.get()
        if not location:
            messagebox.showerror("Error", "Please enter a city or ZIP code.")
            return
        url = f"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={self.api_key}&units={unit}"
        try:
            response = requests.get(url)
            response.raise_for_status()
            weather_data = response.json()
            self.display_weather(weather_data)
        except requests.exceptions.RequestException as e:
            messagebox.showerror("Error", f"Error fetching weather data: {e}")
        except ValueError as e:
            messagebox.showerror("Error", f"Invalid response: {e}")
    def display_weather(self, weather_data):
        try:
            location_name = f"{weather_data['name']}, {weather_data['sys']['country']}"
            temperature = weather_data['main']['temp']
            humidity = weather_data['main']['humidity']
            weather_description = weather_data['weather'][0]['description'].capitalize()
            wind_speed = weather_data['wind']['speed']
            weather_info = (
                f"Location: {location_name}\n"
                f"Temperature: {temperature}Â°{'C' if self.unit_var.get() == 'metric' else 'F'}\n"
                f"Humidity: {humidity}%\n"
                f"Conditions: {weather_description}\n"
                f"Wind Speed: {wind_speed} m/s"
            )
            self.weather_info.config(text=weather_info)
            icon_id = weather_data['weather'][0]['icon']
            icon_url = f"http://openweathermap.org/img/wn/{icon_id}.png"
            icon_response = requests.get(icon_url)
            icon_image = Image.open(io.BytesIO(icon_response.content))
            icon_photo = ImageTk.PhotoImage(icon_image)
            self.weather_icon_label.config(image=icon_photo)
            self.weather_icon_label.image = icon_photo
        except KeyError as e:
            messagebox.showerror("Error", f"Error parsing weather data: {e}")
def main():
    root = tk.Tk()
    app = WeatherApp(root)
    root.mainloop()
if __name__ == "__main__":
    main()
